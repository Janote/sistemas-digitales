00: 00700293
04: 00100313
08: 0062f333
0c: 00030463
10: fff28293
14: 4012d293

1)a

// addi 

00: 00700293

000000000111 00000 000 00101 0010011

immediate[11:0] rs1 000 rd   0010011 

Operacion: addi

rs1: zero
rd: registro 5
inmediato: 7 

Realiza la suma entre el inmediato, que es 7 mas lo que estaba en el registro 0 (que es cero siempre) y lo guarda en el registro 5.
Tal que, el valor del registro 5 es 7.


b)

04: 00100313

000000000001 00000 000 00110 0010011

immediate[11:0] rs1 000 rd   0010011

rs1: zero
rd : registro 6
inmediato: 1 

Operacion: addi

Descripcion de la ejecución:

El valor del registro 6 sera el resultado de sumar el valor dentro del registro 0 (que es siempre 0) mas sumar el inmediato que es 1, 
luego realiza la suma 0 + 1  y lo guarda en el mismo.

c)


08: 0062f333

0000000 00110 00101 111 00110 0110011

0000000 rs2 rs1 111 rd 0110011

Operacion: and

rs2: 00110 //6
rs1: 00101 //5 
rd:  00110 //6

Descripcion de la ejecución:

Guarda en el registro 6 ,la operacion logica bit a bit con el valor dentro del registro 6 que es 1 con el que 
esta en el registro 5, que es 7. Guarda en el registro 6 , el resultado de la operacion que es 1.

D//

0000 0000 0000 0000 0000 0000 0000 0000 0111 r5
0000 0000 0000 0000 0000 0000 0000 0000 0001 r6 
0000 0000 0000 0000 0000 0000 0000 0000 0001 r6 despues de la operacion


d)

0c: 00030463


0000000 00000 00110 000 01000 1100011 

offset[12|10:5] rs2 rs1 000 offset[4:1|11] 1100011

Operacion: beq
rs2: registro zero
rs1: registro 6

Desgloso el offset:

000000000100 : 4

Descripcion de la ejecución:


Si el  valor del registro zero == registro 6 (que es falso),  el pc apunta a su valor actual mas el offset , que es 4, esto es lo mismo que saltar a la proxima instruccion


Inmediato == offset: 00000000000100 = 4

Entonces, el pc apunta a la proxima instruccion si se cumple la condicion o no.



e)

10: fff28293


111111111111 00101 000 00101 0010011

immediate[11:0] rs1 000 rd   0010011

Operacion: addi

rs1: registro 5 
rd : registro 5 
inmediato : 0xFFF


Descripcion de la ejecución: 

El registro destino (r5) , sera lo que vale el r5(que es siete) + el inmediato, que es -1 , tal que r5 va ser igual a  6
,esto lo hara sin importar si el registro 6 era igual  al registro cero, ya que el PC apuntaba alli de todas formas.


f)

14: 4012d293

SRAI

010000 000001 00101 101 00101 0010011
010000 shamt rs1 101 rd 0010011

rd: registro 5
rs1: registro 5 
shamt = 1 

Descripcion de la ejecución: 

Va a guardar en el registro 5, el resultado de mover 1(por el shamt =1 ) posicion a la derecha el valor que tenia almacenado, que era 6(decimal)

R5 : 0x00000006 = 0000 0000 0000 0000 0000 0000 0000 0000 0110

Su mayor cifra significativa es el 0 , rellenara con 0' a la izquierda solo una vez porque el shamt == 1 

R5 : 000000000000000000100000000011;

r5 = 3 ; 


2.
00	li a0,4228 	#carga el valor 4228 en registro a0
04 	li a1,2114	#carga el valor 2214 en registro a1
08	jal ra, resta	#salto incondicional a resta y asigna ra a PC + 4 (en este caso 0x0000000C)
0C	fin: beq zero, zero, fin	#en este ultimo tramo el programa cae en un loop infinito (pues 0 == 0)
10	resta: prologo: addi sp, sp,-4	#hago espacio en el stack para una palabra
14	sw ra,0(sp)		#cargo el ra en el espacio que creó la instrucción previa
18	sub a0,a0,a1		#guardo la resta a0 - a1 en a0
1C	beq a0,zero,epilogo	#si a0 == 0 salto a epilogo	
20	sigo:jal ra, resta	#salto a resta y asigno ra a PC + 4 (0x0000002C)		
24	epilogo:lw ra, 0(sp)	#guardo en ra la ultima palabra insertada en el stack
28	addi sp, sp,4		#libero el espacio que ocupaba la ultima palabra insertada en el stack
2C	ret			#vuelvo al ra

a) Posiciones de memoria de cada etiqueta:
fin 		0x0000000C
resta y prologo	0x00000010
sigo 		0x00000020
epilogo		0x00000024

b) Desplazamiento de llamadas a etiquetas:
La primera llamada a una etiqueta se hace en la instrucción "jal ra, resta".
De ahí se pasa a la instrucción inmediatamente siguiente (que es prologo y sus instrucciones).
En la primera iteración, a0 (4228) - a1 (2114) != 0 con lo cual "beq a0,zero,epilogo" no salta a epilogo y en cambio sigue en la etiqueta "sigo".
En "sigo", volvemos a resta y en esta iteracion a0 (2114) - a1 (2114) == 0 de manera que saltamos a "epilogo", se ejecuta el ret, volvemos a "epilogo" una vez más y 
el ra nos lleva a "fin" que, dado que zero == zero siempre va a ser cierto, se va a llamar a sí mismo continuamente.

c) Tanto li como addi precisan de inmediatos de 12 bits. Esto nos permite representar números con signo en un rango de -2048 a 2047 (o 100000000000 a 011111111111, en binario)

d) Para cargar numeros que exceden ese rango hace falta utilizar lui para cargar los 20 bits superiores y posteriormente cargar los 12 bits inferiores restantes con addi.

e) a1 se mantiene en 2114.

f) Al final, PC es 0x0000000C.

g) (Se asume que todos los valores siguientes están en hexa):
00 -> 04 -> 08 (salta a resta)-> 10 -> 14 -> 18 -> 1C (no se verifica a0 == zero) -> 20 (salta a resta)
-> 10 -> 14 -> 18 -> 1C (se verifica a0 == zero, por eso salta a epilogo) -> 24 -> 28 -> 2C (vuelve al ultimo ra insertado, es decir el 20 + 4)
-> 24 -> 28 -> 2C (vuelve al ultimo ra insertado, es decir el 08 + 4) -> 0C -> 0C -> ... -> 0C

h)Al inicio el valor de ra y sp es indistinto. En la instrucción 08 el ra pasa a ser 0C (08 + 4), en la 0C se dispone de espacio en el stack y con eso alteramos el sp.
Alojamos el valor del ra en la posición disponibilizada (el sp apunta a esta dirección en esta instancia de la ejecución.
Eventualmente el pc está en 20 (instrucción del sigo) y el ra se modifica a 24 (por eso era importante guardar el valor anterior de ra en el stack).
Se procede a hacer espacio para una palabra más en el stack y se guarda la dirección 0x24 en dicho espacio (el sp apunta ahora a este por ser el último insertado).
En epilogo esta última dirección insertada en el stack se asigna al ra, se libera el espacio de stack antes ocupado por 0x24, 
el ret hace volver a epilogo (pues ra es 0x24) y, otra vez, se asingna ra la dirección 0C (que guardamos antes) y liberamos el espacio del stack.
El ret nos manda a 0C (fin) y ra queda con 0C.

i)Habría que reemplazar la instrucción 04 por: srai a1, a0, 1
(Un desplazamiento aritmético a la derecha en una posición es lo mismo que dividir por 2 el registro fuente a0).

00400593
0000 0000 0100 /0000 0/000 /0101 1/001 0011
0005a603
0000 0000 0000 /0101 1/010 /0110 0/000 0011

3a)
<main>:
addi x11 x0 4	#asigno el valor cuatro (decimal) al registro x11 
lw x12 0 x11	#asigno lo que hay en el espacio de memoria 0x4 a x12 (que es 0 por la suposición de que todo espacio de memoria no especificado es 0)
addi x13 x0 4	#asigno 4 a x13
lw x13 0 x13	#asigno 0 a x13
lw x13 0 x13	#asigno 0 a x13
beq x12 x13 -20 <main>	#Como a2 == a3 entonces vuelve a main

<guardar>:
lui x14 0xfffa6
addi x14 x14 -1539
add x12 x14 x12
sw x11 40 x12

<fin_programar>:
addi x10 x0 0
addi x17 x0 93
ecall

3b)
<main>:
addi x11 x0 4	#asigno el valor 0x04  al registro x11 
lw x12 0 x11	#cargo el contenido del espacio de memoria 0x04 (que es 0005a603) en x12
addi x13 x0 4	#asigno el valor 0x04  al registro x13
lw x13 0 x13	#cargo el contenido del espacio de memoria 0x04 (que es 0005a603) en x13
lw x13 0 x13	#cargo el contenido del espacio de memoria 0x0005a603 (que es 0 por no estar definido) en x13
beq x12 x13 -20 <main>	#x12 =! x13 (pues 0005a603 != 0) entonces sigo por PC + 4

<guardar>:
lui x14 0xfffa6	#Cargo como la parte alta (primeros 20 bits) del registro x14
addi x14 x14 -1539	#Cargo los 12 bits más bajos (0x1fd) en x14 (o sea, x14 pasa a ser 0xfffa51fd)
add x12 x14 x12	#Asigno x12 a 0xfffff800 (0xfffa51fd + 0x0005a603)
sw x11 40 x12	#Asigno 0x0 a x11 pues no está definido el espacio de memoria 0xfffff800 + 0x28

<fin_programar>:
addi x10 x0 0	#Asigno 0 a x10
addi x17 x0 93	#Asigno x17 a 93
ecall		#ecall 93 termina la ejecución



















