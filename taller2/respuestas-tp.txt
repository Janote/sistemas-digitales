                                     RESPUESTAS TP

1)A)  El circuito esta formado por 3 entradas donde cada una de ellas esta conectada con un buffer, este nos indicara cuando dejamos pasar el valor y cuando no, de esta forma podemos controlarel flujo de datos.
Haciendo logica combinatoria, podemos observar que cuando tenemos una entrada con un 0 y alguna de las otros dos con un 1, nos genera error.
Esto es ya que estan pasando distintos valores a nuestro output, que es Res.
Cuando ninguna esta prendida, res esta undefined , ya que no tenemos informacion sobre su valor anterior.
Cuando almenos uno de los buffers pasa 1, y los demas no pasan 0, de esa forma res = 1 .
res = 0 cuando pase lo mismo que para el  caso de 1 .

b)
- El valor rojo representa que hay un error, ya que estamos asignando en un mismo caso dos valores distintos a res.
- Cuando esta en azul , es que no esta pasando un valor.
-Cuando esta en verde, es que res = 1 .


c)
La regla que pondriamos es que cuando hay en una entrada un 1 , y nuestro buffer esta en 1 tambien, no puede pasar
que para el resto de entradas haya un 0 y el buffer sea 1.
Lo mismo para el caso del 0 : 
La regla que pondriamos es que cuando hay en una entrada un 0 , y nuestro buffer esta en 1 tambien, no puede pasar
que para el resto de entradas haya un 1 y el buffer sea 1.


d)
Las combinatorias basuras que consideramos en la materia son aquellas las cuales el clock(A/B/C_en) esta en 0 .

Las marcadas con una X son las basuras:

A A_en B B_en C C_en | Res
~~~~~~~~~~~~~~~~~~~~~~~~~~
0  0   0  0   0  0   |  - X
0  0   0  0   0  1   |  0 X
0  0   0  0   1  0   |  - X
0  0   0  0   1  1   |  1 X
0  0   0  1   0  0   |  0 X
0  0   0  1   0  1   |  0 X
0  0   0  1   1  0   |  0 X
0  0   0  1   1  1   |  ? X
0  0   1  0   0  0   |  - X
0  0   1  0   0  1   |  0 X
0  0   1  0   1  0   |  - X
0  0   1  0   1  1   |  1 X
0  0   1  1   0  0   |  1 X
0  0   1  1   0  1   |  ? X
0  0   1  1   1  0   |  1 X
0  0   1  1   1  1   |  1 X
0  1   0  0   0  0   |  0 X
0  1   0  0   0  1   |  0 X
0  1   0  0   1  0   |  0 X
0  1   0  0   1  1   |  ? X
0  1   0  1   0  0   |  0 X
0  1   0  1   0  1   |  0 
0  1   0  1   1  0   |  0 X
0  1   0  1   1  1   |  ? 
0  1   1  0   0  0   |  0 X
0  1   1  0   0  1   |  0 X
0  1   1  0   1  0   |  0 X
0  1   1  0   1  1   |  ? X
0  1   1  1   0  0   |  ? X
0  1   1  1   0  1   |  ? 
0  1   1  1   1  0   |  ? X
0  1   1  1   1  1   |  ? 
1  0   0  0   0  0   |  - X
1  0   0  0   0  1   |  0 X
1  0   0  0   1  0   |  - X
1  0   0  0   1  1   |  1 X
1  0   0  1   0  0   |  0 X
1  0   0  1   0  1   |  0 X
1  0   0  1   1  0   |  0 X
1  0   0  1   1  1   |  ? X
1  0   1  0   0  0   |  - X
1  0   1  0   0  1   |  0 X
1  0   1  0   1  0   |  - X
1  0   1  0   1  1   |  1 X
1  0   1  1   0  0   |  1 X
1  0   1  1   0  1   |  ? X
1  0   1  1   1  0   |  1 X
1  0   1  1   1  1   |  1 X
1  1   0  0   0  0   |  1 X
1  1   0  0   0  1   |  ? X
1  1   0  0   1  0   |  1 X
1  1   0  0   1  1   |  1 X
1  1   0  1   0  0   |  ? X
1  1   0  1   0  1   |  ? 
1  1   0  1   1  0   |  ? X
1  1   0  1   1  1   |  ? 
1  1   1  0   0  0   |  1 X
1  1   1  0   0  1   |  ? X
1  1   1  0   1  0   |  1 X
1  1   1  0   1  1   |  1 X
1  1   1  1   0  0   |  1 X
1  1   1  1   0  1   |  ? 
1  1   1  1   1  0   |  1 X
1  1   1  1   1  1   |  1 

2)

A) 
Las entradas que deben ser consdieradas como control son clk , w(enable)  , en_force_input , clk' y w' para el registro-entrada-salida restringido.
Las salidas son el Reg_output y el Reg_Debug

Reg_output: Representa la condicion en la cual en_out esta en 1 y el estado de Reg_Debug

Reg_Debug: Representa como funciona un flip-flop del tipo 'D' , almacenando valores dependiendo del clock y del dato de entrada.


2)b)

Secuencia: Vamos a partir del caso en que todos los inputs son 0.

Establezco un 1 en w.
en_force_input 1;
en_force_input 1;
clk en 1;


2)C)

Suponer para un valor: Pongo R0 en 1(mismos pasos que en el 2)b) Y todos los demas inputs estan en 0.



\\ CONSIGNAS \\ 
\\un valor arbitrario en R0, luego que este valor se transfiera a R1. \\


utilizo el writing mode en R1.


Pongo en 1 en_force_input Y force_input 


hago un flanco de bajada y luego de subida en el clock.

\\ Luego que el valor de R2 pase a R0 \\ 

desactivo modo escritura R1.

activo la escritura en R0

PONGO EN 0 en_force_input


hago un flanco de bajada y luego de subida en el clock.


\\ Finalmente el valor de R1 a R2. \\ 

desactivo modo escritura R0

activo modo escritura R2

en_force_input a 1;

hago un flanco de bajada y luego de subida en el clock.;


GENERALIZANDO: lo que podemos ver es que tenemos que tener muy en cuenta el Writing mode, ya que si no
prestamos atencion podemos sobreescribir valores y luego esto preste a confusiones.



CHECKPOINT 3 :


3)A)a) ¿Cu ́ales son y qu ́e respresenta cada entrada y cada salida del componente?¿Cu ́ales
entradas deben ser consideradas como de control?

Las entradas Reg_i_Write, Reg_i_enable out   0 <= i <=3, Representan si para ese Registro, se debe utilizar
write para guardar el valor de force_input en Debug y en Out Reg_i_enable esta habilitado.

Luego tenemos entradas las entradas de control ALU_A/B/ENABLEOUT, entrada de clock, OP que son dos digitos y que a la vez es una entrada de la ALU del taller pasado.

Las salidas son las del taller pasado, donde:
el resultado es cero ⇔ Z vale 1
la suma binaria produjo acarreo ⇔ C vale 1
2
la suma interpretada en complemento a 2 dio overflow ⇔ V vale 1
el resultado interpretado en complemento a 2 es negativo ⇔ N vale 1


b) ¿Que informacion muestra cada display y c ́omo es interpretada esta informacion?

La informacion que muestra en c/Display de los Debug's de los registros
 son cada numero de 4 bits, segun este activado el clock y el Writing Mode.

Los debugs de las ALU'S :

En el caso del A y el B, ambos debugs  hacen referencia al output de los anteriores registros, donde c/u de ellos tienen que ser
iguales o que no este activado el enable , tal que cuando se produzca la subida del clock, ya  que si no estariamos en Hi-Z y no representaria ningun 
valor.

El S-Debug depende totalmente del OP , ya que con este hacemos referencia a que operacion queremos referenciarnos.


4)c : 
Escribir la secuencia de activaci´on y desactivaci´on de se˜nales para cargar el valor 4
en el registro R2 y el -3 en el registro R3.

Parto de que todo esta en 0: 

Seteo el valor -3 en Reg_in (1100)
activo WRITE EN R3
hago un flanco de bajada y luego de subida en el clock;

desactivo WRITE EN R3
Seteo el valor 4 en Reg_in (0100)
activo WRITE EN R2
hago un flanco de bajada y luego de subida en el clock;


4)d) 

Cargar los siguientes pares de valores en R0 y R1 respectivamente, con las operaciones
indicadas:

11 OR
01 RESTA
00 ADD
10 AND

1) (4, 0), OR, SUB
2) (7, -1), SUB, AND
3) (-8, -2), ADD, SUB
4) (8, -9), OR, AND
Realizar las dos operaciones indicadas y guardar los resultados en R2 y R3 respecti-
vamente. Para el primer caso, escribir la secuencia completa de activaci ́on de se ̃nales.
e) ¿Por que se niega la se ̃nal clk en la ALU antes de pasarle este valor al registro de
salida?

Se niega la senal de clock ya que interpretamos que las operaciones se hacen en cada pulso , los cambios los hace cuando esta arriba 
y cuando baja 





    